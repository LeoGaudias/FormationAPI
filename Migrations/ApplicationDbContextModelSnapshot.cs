// <auto-generated />
using FormationApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FormationApi.Migrations
{
    /// <summary>
    /// 
    /// </summary>
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("FormationApi.Models.ContactInfoPerso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("FixedPhone");

                    b.Property<string>("Mail");

                    b.Property<string>("MobilePhone");

                    b.Property<int>("PersonId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("ContactInfoPerso");
                });

            modelBuilder.Entity("FormationApi.Models.ContactInfoPro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("FixedPhone");

                    b.Property<string>("Mail");

                    b.Property<string>("MobilePhone");

                    b.Property<int>("PersonId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("ContactInfoPro");
                });

            modelBuilder.Entity("FormationApi.Models.Geo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Geo");
                });

            modelBuilder.Entity("FormationApi.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("CurrentClient");

                    b.Property<string>("Department");

                    b.Property<string>("DriverLicence");

                    b.Property<string>("Email");

                    b.Property<string>("EmergencyContact");

                    b.Property<string>("EmergencyPhoneNumber");

                    b.Property<string>("Entity");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("Firstname");

                    b.Property<string>("FunctionDescription");

                    b.Property<string>("FunctionName");

                    b.Property<string>("Gender");

                    b.Property<string>("Github");

                    b.Property<string>("Lastname");

                    b.Property<string>("Linkedin");

                    b.Property<string>("Manager");

                    b.Property<int>("NumberOfChild");

                    b.Property<string>("Photo");

                    b.Property<string>("Slack");

                    b.Property<string>("SocialNumber");

                    b.Property<string>("TshirtSize");

                    b.Property<string>("Twitter");

                    b.Property<string>("Url");

                    b.Property<string>("WorkAdress");

                    b.Property<string>("Workcity");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("FormationApi.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("FormationApi.Models.ContactInfoPerso", b =>
                {
                    b.HasOne("FormationApi.Models.Person", "Person")
                        .WithOne("ContactInfoPerso")
                        .HasForeignKey("FormationApi.Models.ContactInfoPerso", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormationApi.Models.ContactInfoPro", b =>
                {
                    b.HasOne("FormationApi.Models.Person", "Person")
                        .WithOne("ContactInfoPro")
                        .HasForeignKey("FormationApi.Models.ContactInfoPro", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormationApi.Models.Geo", b =>
                {
                    b.HasOne("FormationApi.Models.Person", "Person")
                        .WithOne("Geo")
                        .HasForeignKey("FormationApi.Models.Geo", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormationApi.Models.Skill", b =>
                {
                    b.HasOne("FormationApi.Models.Person")
                        .WithMany("Skills")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
